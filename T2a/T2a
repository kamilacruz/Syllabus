{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "from collections import deque\n",
    "#encontrar la longitud máxima de secuencia de paréntesis balanceados\n",
    " \n",
    "def calcular_max_long(str):  \n",
    "    long = 0\n",
    "    stack = deque()\n",
    "    stack.append(-1) #manejar el caso donde el primer ( se encuentra en el índice 0 del string\n",
    "\n",
    "    for i, k in enumerate(str): #fuente: https://www.bitdegree.org/learn/python-enumerate#how-enumerate-works\n",
    "        if k == '(': #por abre paréntesis \n",
    "            stack.append(i)\n",
    "        else: #por cierre paréntesis\n",
    "            stack.pop()\n",
    "            if not stack: #si el stack queda vacío después\n",
    "                #inserte el índice en el que se encuentra actualmente la iteración\n",
    "                stack.append(i)\n",
    "                continue\n",
    "\n",
    "            actual_longitud = i - stack[-1] #calcular la longitud de la secuencia actual\n",
    "            #restándole al índice actual el valor en el tope del stack\n",
    " \n",
    "            if long < actual_longitud: #comprar la longitud con el máx registrado hasta el momento \n",
    "                long = actual_longitud #actualice la variable en caso de ser mayor la nueva longitud\n",
    " \n",
    "    return long \n",
    " \n",
    "\n",
    "parentesis= \"(((()()\"\n",
    "max_long=calcular_max_long(parentesis)\n",
    "print(max_long)                          # imprimirá 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

#!/usr/bin/env python
# coding: utf-8

# In[1]:


from collections import deque
#encontrar la longitud máxima de secuencia de paréntesis balanceados
 
def calcular_max_long(str):  
    long = 0
    stack = deque()
    stack.append(-1) #manejar el caso donde el primer ( se encuentra en el índice 0 del string

    for i, k in enumerate(str): #fuente: https://www.bitdegree.org/learn/python-enumerate#how-enumerate-works
        if k == '(': #por abre paréntesis 
            stack.append(i)
        else: #por cierre paréntesis
            stack.pop()
            if not stack: #si el stack queda vacío después
                #inserte el índice en el que se encuentra actualmente la iteración
                stack.append(i)
                continue

            actual_longitud = i - stack[-1] #calcular la longitud de la secuencia actual
            #restándole al índice actual el valor en el tope del stack
 
            if long < actual_longitud: #comprar la longitud con el máx registrado hasta el momento 
                long = actual_longitud #actualice la variable en caso de ser mayor la nueva longitud
 
    return long 
 

parentesis= "(((()()"
max_long=calcular_max_long(parentesis)
print(max_long)                          # imprimirá 4


# In[ ]:




